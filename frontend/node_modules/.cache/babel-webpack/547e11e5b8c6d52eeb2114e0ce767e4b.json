{"ast":null,"code":"import _asyncToGenerator from \"/home/alex/Bureau/Chiffrement/Chiffrement/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { MessageService } from '../services/message.service';\nimport { Client } from '../Modèle/Client';\nlet TchatComponent = class TchatComponent {\n  constructor(client, socket, route) {\n    this.client = client;\n    this.socket = socket;\n    this.route = route;\n    this.messages = [];\n    this.message = \"\";\n    this.destinataire = \"\";\n    this.name = \"\";\n    this.id = \"\";\n    this.clients = [];\n    this.bob = new Client();\n    this.messageService = new MessageService(socket);\n    var nom = this.route.queryParams.subscribe(params => {\n      this.client.age = params.age;\n      this.client.setName(params.username);\n    });\n    this.messageService.createClient(this.client);\n    this.clients.push(this.client);\n    this.getReceiveInformation();\n    this.getNomberConnected();\n  }\n\n  getNomberConnected() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      while (true) {\n        _this.socket.emit('NumberClient');\n\n        yield new Promise(r => setTimeout(r, 2000));\n      }\n    })();\n  }\n\n  getReceiveInformation() {\n    this.getServerMessage();\n    this.getNumberUser();\n  }\n\n  getServerMessage() {\n    this.socket.on('client', data => {\n      if (data.id_envoyeur != this.client.id) this.messages.push(data.message);\n    });\n  }\n\n  getNumberUser() {\n    let nb = 0;\n    this.socket.on('clients', data => {\n      console.log(data);\n\n      for (let i = 0; i < data.length; i++) {\n        var client = new Client();\n        client.setName(data[i].client.name);\n        client.setAge(data[i].client.age);\n        client.setSocket(data[i].id_socket);\n\n        if (!this.clientAlreadyExist(client)) {\n          this.clients.push(client);\n        }\n      }\n    });\n    return nb;\n  }\n\n  clientAlreadyExist(client) {\n    for (let i = 0; i < this.clients.length; i++) {\n      if (this.clients[i].getName() == client.getName() && this.clients[i].getAge() == client.getAge()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  onSubmit() {\n    this.messages.push(this.message);\n    this.sendMessageTo(\"SPCekpse0f\", \"Bonjour Bob\"); //this.broadcastMessage( this.client.id, this.message);\n\n    this.message = \"\";\n  }\n\n  sendMessageTo(destinataire, message) {\n    this.messageService.sendMessageTo(this.client.id, destinataire, message);\n  }\n\n  broadcastMessage(idclient, message) {\n    this.messageService.broadCastMessage(idclient, message);\n  }\n\n  getClient() {\n    return this.client;\n  }\n\n  ngOnInit() {}\n\n};\n\n__decorate([Input()], TchatComponent.prototype, \"messages\", void 0);\n\n__decorate([Input()], TchatComponent.prototype, \"message\", void 0);\n\n__decorate([Input()], TchatComponent.prototype, \"destinataire\", void 0);\n\n__decorate([Input()], TchatComponent.prototype, \"name\", void 0);\n\n__decorate([Input()], TchatComponent.prototype, \"id\", void 0);\n\nTchatComponent = __decorate([Component({\n  selector: 'app-tchat',\n  templateUrl: './tchat.component.html',\n  styleUrls: ['./tchat.component.css']\n})], TchatComponent);\nexport { TchatComponent };","map":{"version":3,"sources":["/home/alex/Bureau/Chiffrement/Chiffrement/frontend/src/app/tchat/tchat.component.ts"],"names":["__decorate","Component","Input","MessageService","Client","TchatComponent","constructor","client","socket","route","messages","message","destinataire","name","id","clients","bob","messageService","nom","queryParams","subscribe","params","age","setName","username","createClient","push","getReceiveInformation","getNomberConnected","emit","Promise","r","setTimeout","getServerMessage","getNumberUser","on","data","id_envoyeur","nb","console","log","i","length","setAge","setSocket","id_socket","clientAlreadyExist","getName","getAge","onSubmit","sendMessageTo","broadcastMessage","idclient","broadCastMessage","getClient","ngOnInit","prototype","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { MessageService } from '../services/message.service';\nimport { Client } from '../Modèle/Client';\nlet TchatComponent = class TchatComponent {\n    constructor(client, socket, route) {\n        this.client = client;\n        this.socket = socket;\n        this.route = route;\n        this.messages = [];\n        this.message = \"\";\n        this.destinataire = \"\";\n        this.name = \"\";\n        this.id = \"\";\n        this.clients = [];\n        this.bob = new Client();\n        this.messageService = new MessageService(socket);\n        var nom = this.route.queryParams.subscribe(params => {\n            this.client.age = params.age;\n            this.client.setName(params.username);\n        });\n        this.messageService.createClient(this.client);\n        this.clients.push(this.client);\n        this.getReceiveInformation();\n        this.getNomberConnected();\n    }\n    async getNomberConnected() {\n        while (true) {\n            this.socket.emit('NumberClient');\n            await new Promise(r => setTimeout(r, 2000));\n        }\n    }\n    getReceiveInformation() {\n        this.getServerMessage();\n        this.getNumberUser();\n    }\n    getServerMessage() {\n        this.socket.on('client', (data) => {\n            if (data.id_envoyeur != this.client.id)\n                this.messages.push(data.message);\n        });\n    }\n    getNumberUser() {\n        let nb = 0;\n        this.socket.on('clients', (data) => {\n            console.log(data);\n            for (let i = 0; i < data.length; i++) {\n                var client = new Client();\n                client.setName(data[i].client.name);\n                client.setAge(data[i].client.age);\n                client.setSocket(data[i].id_socket);\n                if (!this.clientAlreadyExist(client)) {\n                    this.clients.push(client);\n                }\n            }\n        });\n        return nb;\n    }\n    clientAlreadyExist(client) {\n        for (let i = 0; i < this.clients.length; i++) {\n            if (this.clients[i].getName() == client.getName() && this.clients[i].getAge() == client.getAge()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onSubmit() {\n        this.messages.push(this.message);\n        this.sendMessageTo(\"SPCekpse0f\", \"Bonjour Bob\");\n        //this.broadcastMessage( this.client.id, this.message);\n        this.message = \"\";\n    }\n    sendMessageTo(destinataire, message) {\n        this.messageService.sendMessageTo(this.client.id, destinataire, message);\n    }\n    broadcastMessage(idclient, message) {\n        this.messageService.broadCastMessage(idclient, message);\n    }\n    getClient() {\n        return this.client;\n    }\n    ngOnInit() {\n    }\n};\n__decorate([\n    Input()\n], TchatComponent.prototype, \"messages\", void 0);\n__decorate([\n    Input()\n], TchatComponent.prototype, \"message\", void 0);\n__decorate([\n    Input()\n], TchatComponent.prototype, \"destinataire\", void 0);\n__decorate([\n    Input()\n], TchatComponent.prototype, \"name\", void 0);\n__decorate([\n    Input()\n], TchatComponent.prototype, \"id\", void 0);\nTchatComponent = __decorate([\n    Component({\n        selector: 'app-tchat',\n        templateUrl: './tchat.component.html',\n        styleUrls: ['./tchat.component.css']\n    })\n], TchatComponent);\nexport { TchatComponent };\n"]},"metadata":{},"sourceType":"module"}