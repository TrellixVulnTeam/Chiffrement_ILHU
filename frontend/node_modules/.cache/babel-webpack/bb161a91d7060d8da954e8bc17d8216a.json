{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/diakh/M2_ACDI/Projets/Projet_Securite/Chiffrement/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as bigintCryptoUtils from 'bigint-crypto-utils';\nexport class Key {\n  Key() {}\n\n  createPublicKey(upperlimit) {\n    return _asyncToGenerator(function* () {\n      let p;\n      let q;\n      let m;\n      let n;\n      let e;\n\n      do {\n        //génération aléatoire de deux grands entiers premiers p et q\n        yield bigintCryptoUtils.prime(upperlimit).then(v => {\n          p = v;\n        });\n        yield bigintCryptoUtils.prime(upperlimit).then(v => {\n          q = v;\n        }); //calcul de n\n\n        n = p * q; //calcul de m (indicatrice d'Euler) = (p - 1) * (q - 1) tel qu'il soit premier et inférieur a n\n\n        m = (p - BigInt(\"1\")) * (q - BigInt(\"1\"));\n      } while (p == q || n < m);\n\n      console.log(\"p: \" + p);\n      console.log(\"q: \" + q);\n      console.log(\"n: \" + n);\n      console.log(\"m: \" + m); //choix d'un petit entier impair e (exposant public) qui soit premier avec m\n\n      do {\n        yield bigintCryptoUtils.randBits(4).then(res => {\n          e = res;\n        });\n      } while (bigintCryptoUtils.gcd(e, m) != BigInt(1) || e % BigInt(2) == BigInt(0));\n\n      console.log(\"e: \" + e);\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/diakh/M2_ACDI/Projets/Projet_Securite/Chiffrement/frontend/src/app/Modèle/Key.ts"],"names":["bigintCryptoUtils","Key","createPublicKey","upperlimit","p","q","m","n","e","prime","then","v","BigInt","console","log","randBits","res","gcd"],"mappings":";AAAA,OAAO,KAAKA,iBAAZ,MAAmC,qBAAnC;AACA,OAAO,MAAMC,GAAN,CAAU;AACbA,EAAAA,GAAG,GAAG,CAAG;;AACHC,EAAAA,eAAe,CAACC,UAAD,EAAa;AAAA;AAC9B,UAAIC,CAAJ;AACA,UAAIC,CAAJ;AACA,UAAIC,CAAJ;AACA,UAAIC,CAAJ;AACA,UAAIC,CAAJ;;AACA,SAAG;AACC;AACA,cAAMR,iBAAiB,CAACS,KAAlB,CAAwBN,UAAxB,EAAoCO,IAApC,CAAyCC,CAAC,IAAI;AAChDP,UAAAA,CAAC,GAAGO,CAAJ;AACH,SAFK,CAAN;AAGA,cAAMX,iBAAiB,CAACS,KAAlB,CAAwBN,UAAxB,EAAoCO,IAApC,CAAyCC,CAAC,IAAI;AAChDN,UAAAA,CAAC,GAAGM,CAAJ;AACH,SAFK,CAAN,CALD,CAQC;;AACAJ,QAAAA,CAAC,GAAGH,CAAC,GAAGC,CAAR,CATD,CAUC;;AACAC,QAAAA,CAAC,GAAG,CAACF,CAAC,GAAGQ,MAAM,CAAC,GAAD,CAAX,KAAqBP,CAAC,GAAGO,MAAM,CAAC,GAAD,CAA/B,CAAJ;AACH,OAZD,QAYSR,CAAC,IAAIC,CAAL,IAAUE,CAAC,GAAGD,CAZvB;;AAaAO,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQV,CAApB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQT,CAApB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQP,CAApB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQR,CAApB,EAtB8B,CAuB9B;;AACA,SAAG;AACC,cAAMN,iBAAiB,CAACe,QAAlB,CAA2B,CAA3B,EAA8BL,IAA9B,CAAmCM,GAAG,IAAI;AAC5CR,UAAAA,CAAC,GAAGQ,GAAJ;AACH,SAFK,CAAN;AAGH,OAJD,QAIShB,iBAAiB,CAACiB,GAAlB,CAAsBT,CAAtB,EAAyBF,CAAzB,KAA+BM,MAAM,CAAC,CAAD,CAArC,IAA4CJ,CAAC,GAAGI,MAAM,CAAC,CAAD,CAAV,IAAiBA,MAAM,CAAC,CAAD,CAJ5E;;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQN,CAApB;AA7B8B;AA8BjC;;AAhCY","sourcesContent":["import * as bigintCryptoUtils from 'bigint-crypto-utils';\r\nexport class Key {\r\n    Key() { }\r\n    async createPublicKey(upperlimit) {\r\n        let p;\r\n        let q;\r\n        let m;\r\n        let n;\r\n        let e;\r\n        do {\r\n            //génération aléatoire de deux grands entiers premiers p et q\r\n            await bigintCryptoUtils.prime(upperlimit).then(v => {\r\n                p = v;\r\n            });\r\n            await bigintCryptoUtils.prime(upperlimit).then(v => {\r\n                q = v;\r\n            });\r\n            //calcul de n\r\n            n = p * q;\r\n            //calcul de m (indicatrice d'Euler) = (p - 1) * (q - 1) tel qu'il soit premier et inférieur a n\r\n            m = (p - BigInt(\"1\")) * (q - BigInt(\"1\"));\r\n        } while (p == q || n < m);\r\n        console.log(\"p: \" + p);\r\n        console.log(\"q: \" + q);\r\n        console.log(\"n: \" + n);\r\n        console.log(\"m: \" + m);\r\n        //choix d'un petit entier impair e (exposant public) qui soit premier avec m\r\n        do {\r\n            await bigintCryptoUtils.randBits(4).then(res => {\r\n                e = res;\r\n            });\r\n        } while (bigintCryptoUtils.gcd(e, m) != BigInt(1) || e % BigInt(2) == BigInt(0));\r\n        console.log(\"e: \" + e);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}