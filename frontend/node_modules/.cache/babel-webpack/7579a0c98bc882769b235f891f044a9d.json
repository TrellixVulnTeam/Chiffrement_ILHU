{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/diakh/M2_ACDI/Projets/Projet_Securite/Chiffrement/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as bigintCryptoUtils from 'bigint-crypto-utils';\nexport class Key {\n  Key() {}\n\n  createPublicKey(upperlimit) {\n    return _asyncToGenerator(function* () {\n      let p, q, m, n; //génération aléatoire de deux grands entiers premiers p et q\n\n      do {\n        yield bigintCryptoUtils.prime(upperlimit).then(v => {\n          p = v;\n        });\n        yield bigintCryptoUtils.prime(upperlimit).then(v => {\n          q = v;\n        });\n      } while (p == q);\n\n      console.log(\"q: \" + q);\n      calcul;\n      de;\n      n = p * q; //calcul de m (indicatrice d'Euler) = (p - 1) * (q - 1) tel qu'il soit premier et inférieur a n\n      //choix d'un petit entier impair e (exposant public) qui soit premier avec m\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/diakh/M2_ACDI/Projets/Projet_Securite/Chiffrement/frontend/src/app/Modèle/Key.ts"],"names":["bigintCryptoUtils","Key","createPublicKey","upperlimit","p","q","m","n","prime","then","v","console","log","calcul","de"],"mappings":";AAAA,OAAO,KAAKA,iBAAZ,MAAmC,qBAAnC;AACA,OAAO,MAAMC,GAAN,CAAU;AACbA,EAAAA,GAAG,GAAG,CAAG;;AACHC,EAAAA,eAAe,CAACC,UAAD,EAAa;AAAA;AAC9B,UAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,CAD8B,CAE9B;;AACA,SAAG;AACC,cAAMP,iBAAiB,CAACQ,KAAlB,CAAwBL,UAAxB,EAAoCM,IAApC,CAAyCC,CAAC,IAAI;AAChDN,UAAAA,CAAC,GAAGM,CAAJ;AACH,SAFK,CAAN;AAGA,cAAMV,iBAAiB,CAACQ,KAAlB,CAAwBL,UAAxB,EAAoCM,IAApC,CAAyCC,CAAC,IAAI;AAChDL,UAAAA,CAAC,GAAGK,CAAJ;AACH,SAFK,CAAN;AAGH,OAPD,QAOSN,CAAC,IAAIC,CAPd;;AAQAM,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQP,CAApB;AACAQ,MAAAA,MAAM;AACNC,MAAAA,EAAE;AACFP,MAAAA,CAAC,GAAGH,CAAC,GAAGC,CAAR,CAd8B,CAe9B;AACA;AAhB8B;AAiBjC;;AAnBY","sourcesContent":["import * as bigintCryptoUtils from 'bigint-crypto-utils';\r\nexport class Key {\r\n    Key() { }\r\n    async createPublicKey(upperlimit) {\r\n        let p, q, m, n;\r\n        //génération aléatoire de deux grands entiers premiers p et q\r\n        do {\r\n            await bigintCryptoUtils.prime(upperlimit).then(v => {\r\n                p = v;\r\n            });\r\n            await bigintCryptoUtils.prime(upperlimit).then(v => {\r\n                q = v;\r\n            });\r\n        } while (p == q);\r\n        console.log(\"q: \" + q);\r\n        calcul;\r\n        de;\r\n        n = p * q;\r\n        //calcul de m (indicatrice d'Euler) = (p - 1) * (q - 1) tel qu'il soit premier et inférieur a n\r\n        //choix d'un petit entier impair e (exposant public) qui soit premier avec m\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}