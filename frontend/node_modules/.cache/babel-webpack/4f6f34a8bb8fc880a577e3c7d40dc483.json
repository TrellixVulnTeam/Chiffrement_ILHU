{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/diakh/M2_ACDI/Projets/Projet_Securite/Chiffrement/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//import * as bigintCryptoUtils from 'bigint-crypto-utils'\n//import { BigInteger } from \"big-integer\";\nexport class Key {\n  Key() {}\n\n  createPublicKey(upperlimit) {\n    return _asyncToGenerator(function* () {\n      let p, q, m, n; //génération aléatoire de deux grands entiers premiers p et q\n\n      let isPrime = true;\n\n      do {\n        //isPrime = await bigintCryptoUtils.isProbablyPrime(upperlimit);\n        // p = bigintCryptoUtils.prime(upperlimit);\n        // q = bigintCryptoUtils.prime(upperlimit);\n        console.log(\"p: \" + p);\n        console.log(\"q: \" + q);\n      } while (!isPrime || p == q); // calcul de n = p * q\n      //calcul de m (indicatrice d'Euler) = (p - 1) * (q - 1) tel qu'il soit premier et inférieur a n\n      //choix d'un petit entier impair e (exposant public) qui soit premier avec m\n\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/diakh/M2_ACDI/Projets/Projet_Securite/Chiffrement/frontend/src/app/Modèle/Key.ts"],"names":["Key","createPublicKey","upperlimit","p","q","m","n","isPrime","console","log"],"mappings":";AAAA;AACA;AACA,OAAO,MAAMA,GAAN,CAAU;AACbA,EAAAA,GAAG,GAAG,CAAG;;AACHC,EAAAA,eAAe,CAACC,UAAD,EAAa;AAAA;AAC9B,UAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,CAD8B,CAE9B;;AACA,UAAIC,OAAO,GAAG,IAAd;;AACA,SAAG;AACC;AACA;AACA;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAQN,CAApB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAQL,CAApB;AACH,OAND,QAMS,CAACG,OAAD,IAAYJ,CAAC,IAAIC,CAN1B,EAJ8B,CAW9B;AACA;AACA;;AAb8B;AAcjC;;AAhBY","sourcesContent":["//import * as bigintCryptoUtils from 'bigint-crypto-utils'\r\n//import { BigInteger } from \"big-integer\";\r\nexport class Key {\r\n    Key() { }\r\n    async createPublicKey(upperlimit) {\r\n        let p, q, m, n;\r\n        //génération aléatoire de deux grands entiers premiers p et q\r\n        let isPrime = true;\r\n        do {\r\n            //isPrime = await bigintCryptoUtils.isProbablyPrime(upperlimit);\r\n            // p = bigintCryptoUtils.prime(upperlimit);\r\n            // q = bigintCryptoUtils.prime(upperlimit);\r\n            console.log(\"p: \" + p);\r\n            console.log(\"q: \" + q);\r\n        } while (!isPrime || p == q);\r\n        // calcul de n = p * q\r\n        //calcul de m (indicatrice d'Euler) = (p - 1) * (q - 1) tel qu'il soit premier et inférieur a n\r\n        //choix d'un petit entier impair e (exposant public) qui soit premier avec m\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}